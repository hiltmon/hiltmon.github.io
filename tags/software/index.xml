<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software on Hiltmon</title><link>https://hiltmon.github.io/tags/software/</link><description>Recent content in Software on Hiltmon</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 11 Apr 2013 13:37:00 -0400</lastBuildDate><atom:link href="https://hiltmon.github.io/tags/software/index.xml" rel="self" type="application/rss+xml"/><item><title>Natsukashii - iPulse Sighting</title><link>https://hiltmon.github.io/blog/2013/04/11/natsukashii-ipulse-sighting/</link><pubDate>Thu, 11 Apr 2013 13:37:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/04/11/natsukashii-ipulse-sighting/</guid><description>Natsukashii (懐かしい) is a Japanese word for &amp;ldquo;feeling nostalgic&amp;rdquo; or &amp;ldquo;with fond memories&amp;rdquo;.
I happened to click on a Mike Zornek (@zorn) link today and noticed that he is still running iPulse on his desktop. I used to run it back in the early days of OS X on my Titanium Powerbook.
Back then, I had already returned to the Mac. But in 2003 or so, OS X was still very buggy and slow.</description></item><item><title>How to Flexify a Class</title><link>https://hiltmon.github.io/blog/2012/12/19/how-to-flexify-a-class/</link><pubDate>Wed, 19 Dec 2012 13:19:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/12/19/how-to-flexify-a-class/</guid><description>OK, so you managed months ago to stop yourself from Premature Flexification when creating a class (or someone else did), but now the time has come to add features or flexify the existing feature set of the class.
There are many wrong ways to do this, and I have seen all of them in practice:
Duplicate the existing class, rename it and add the flexibility to the new class. This sounds great as existing code remains unaffected, but sucks if a bug is found in the original and both need to be maintained.</description></item><item><title>Premature Flexification</title><link>https://hiltmon.github.io/blog/2012/12/19/premature-flexification/</link><pubDate>Wed, 19 Dec 2012 10:42:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/12/19/premature-flexification/</guid><description>I was sitting down to design an iOS widget to display an analogue clock face for an upcoming app. I wanted to make sure, as we all do, that the widget will work for all scenarios needed by the app. The app needs to display the time in different time zones, given a reference time in a reference timezone.
✓ User defined background image and hand images
STOP! You Aren&amp;rsquo;t Gonna Need It.</description></item><item><title>Export to Excel is a Red Flag</title><link>https://hiltmon.github.io/blog/2012/09/29/export-to-excel-is-a-red-flag/</link><pubDate>Sat, 29 Sep 2012 15:57:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/09/29/export-to-excel-is-a-red-flag/</guid><description>As a developer, I often get requests from clients asking me if I could deliver them a spreadsheet using their data from their systems that contains X and Y and Z. As a maker of software products, I often get asked whether my product supports ‘Export to Excel’.
Most developers say yes, here is your spreadsheet and yes, the product has ‘Export to Excel’. My answer is different, it’s sometimes and no, and this is why.</description></item><item><title>Expect the Unexpected</title><link>https://hiltmon.github.io/blog/2012/08/08/expect-the-unexpected/</link><pubDate>Wed, 08 Aug 2012 11:49:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/08/08/expect-the-unexpected/</guid><description>There was a panic at one of my client sites today when the reporting software I wrote for them stopped working. Instead of presenting reports as usual, the software threw an unknown error.
WTF, an unknown error!
I wrote the darn system, I know all the errors, because I coded all of them!
A quick glance at the logs indicated that indeed, Passenger was throwing an unknown error when accessing one Rails URL (and all others were working just fine).</description></item><item><title>Well Managed Scripts better than Platforms</title><link>https://hiltmon.github.io/blog/2012/08/07/well-managed-scripts-better-than-platforms/</link><pubDate>Tue, 07 Aug 2012 12:03:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/08/07/well-managed-scripts-better-than-platforms/</guid><description>One of the most misunderstood things in computing is the need and power of scripts. Most IT shops seek out platforms, tools and technologies to perform business functions, when a bunch of well architected and documented scripts is all that is really needed.
script /noun/
An automated series of instructions carried out in a specific order written in an interpreted computer language
Over the years, I have seen many organizations go out and buy very expensive platforms and hardware, and hire very expensive staff, without even once looking at the alternative, well managed scripts.</description></item><item><title>Change is Good - New Applications replacing Old Ones</title><link>https://hiltmon.github.io/blog/2012/08/03/change-is-good-new-applications-replacing-old-ones/</link><pubDate>Fri, 03 Aug 2012 15:38:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/08/03/change-is-good-new-applications-replacing-old-ones/</guid><description>There is some amazing independent software out there for the Mac. And I use a lot of it. I realized today, while fixing a problem on my wife’s laptop, that I have pretty much replaced many older products with new ones on my computer over the last year or so, yet she still uses all the old stuff.
Change is good for me. I love using new products that improve my productivity, work better or look better.</description></item><item><title>Day One updated to v1.7</title><link>https://hiltmon.github.io/blog/2012/08/02/day-one-updated-to-v1-dot-7/</link><pubDate>Thu, 02 Aug 2012 15:30:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/08/02/day-one-updated-to-v1-dot-7/</guid><description>My favorite journaling application Day One has been updated for both Mac and iOS. Amongst the best new features are photo’s, location checkins using Foursquare and weather. They have also updated the markdown engine. I use it all day to capture what I do as well as log all my activities (such as creating this post or committing code, see Bread crumbs in Day One - The Hiltmon).
Since this new version is sandboxed, the command line client has been moved.</description></item><item><title>The value of Apps</title><link>https://hiltmon.github.io/blog/2012/07/24/the-value-of-apps/</link><pubDate>Tue, 24 Jul 2012 08:37:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/07/24/the-value-of-apps/</guid><description>The online conversation on the Sparrow sale continues unabated. But in amongst all the vitriol, I found some amazing articles written long before the sale pretty much predicting how it is now. Here are some great quotes and links.
Guy English, in Software Sea Change:
An Application represents the developer’s best effort at creating software that applies the capabilities of the device to solving a specific problem. Making people laugh is not a problem an Application can solve; it’s not about the device it’s about the person using it.</description></item><item><title>Low app prices unsustainable</title><link>https://hiltmon.github.io/blog/2012/07/23/low-app-prices-unsustainable/</link><pubDate>Mon, 23 Jul 2012 19:39:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/07/23/low-app-prices-unsustainable/</guid><description>David Barnard, of AppCubby, writing in The Sparrow Problem, where he competently works out that the sales and income numbers for Sparrow were not enough to sustain the team, and therefore the business, concludes:
The age of selling software to users at a fixed, one-time price is coming to an end. It’s just not sustainable at the absurdly low prices users have come to expect. Sure, independent developers may scrap it out one app at a time, and some may even do quite well and be the exception to the rule, but I don’t think Sparrow would have sold-out if the team — and their investors — believed they could build a substantially profitable company on their own.</description></item><item><title>How many 99c apps it takes to afford that guy</title><link>https://hiltmon.github.io/blog/2012/07/23/how-many-99c-apps-it-takes-to-afford-that-guy/</link><pubDate>Mon, 23 Jul 2012 10:04:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/07/23/how-many-99c-apps-it-takes-to-afford-that-guy/</guid><description>Drew Crawford, jumping in on the Sparrow story in Let’s talk about Sparrow, actually covers another area I have been trying to find the words for, why good, experienced software developers, like myself, cost real money:
Let me tell you how it actually is, because I write iOS apps. A fully-dedicated senior iOS developer is way more expensive than you think. I’m not talking about “some guy whose LinkedIn profile says he is a senior iOS developer, let’s send his profile to HR.</description></item><item><title>7 Reasons Why I Can’t Do “Free”</title><link>https://hiltmon.github.io/blog/2012/07/19/7-reasons-why-i-cant-do-free/</link><pubDate>Thu, 19 Jul 2012 19:03:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/07/19/7-reasons-why-i-cant-do-free/</guid><description>Sharon Hayes clearly explains why she does not work for free in 7 Reasons Why I Can’t Do “Free”, check it out.
It Zaps My Creative Juice Each of us has only so many truly productive hours in a day. In my own case, I can get in about 5 solid productive hours on a typical day. It’s like a bank for me. Each day, I start off with this reserve of 5 hours.</description></item><item><title>Software will always trump Hardware</title><link>https://hiltmon.github.io/blog/2012/07/19/software-will-always-trump-hardware/</link><pubDate>Thu, 19 Jul 2012 18:59:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/07/19/software-will-always-trump-hardware/</guid><description>Shawn Blanc reviews the Nexus 7 tablet in Thoughts and Impressions of the Nexus 7, and concludes with a great point:
For me, when it comes down to it, software will always trump hardware. When I’m using a device like the Nexus 7 I want to know where the details are. Where is the magic? The fun? The incredible 3rd-party apps? It is because of these elements that the iPad is more than the sum of its parts while its competition continues to remains less than.</description></item><item><title>Kifu v1.0 Released</title><link>https://hiltmon.github.io/blog/2012/07/12/kifu-v1-dot-0-released/</link><pubDate>Thu, 12 Jul 2012 15:56:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/07/12/kifu-v1-dot-0-released/</guid><description>Noverse LLC (my company) and the The Shukai Company LLC, is very pleased to announce that Kifu v1.0.0 has shipped. And our first customers are already happily using Kifu in production. We want to thank all our beta testers and beta clients for testing Kifu and helping us make such a great product.
Kifu is an intuitive, easy-to-use software product for small non-profits and community organizations to easily manage their community and its events.</description></item><item><title>Target the Forward Fringe</title><link>https://hiltmon.github.io/blog/2012/07/06/target-the-forward-fringe/</link><pubDate>Fri, 06 Jul 2012 11:51:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/07/06/target-the-forward-fringe/</guid><description>Daniel Jalkut, writing on his Red-Sweater blog in Target The Forward Fringe nails who our target market truly is, in discussing whether to retina-ize (HiDPI) our websites and applications.
Because HiDPI customers may be a fringe group, but they are a forward-facing fringe. They represent the users of the future, and the more we cater to them now, the more deeply embedded our products and designs will be in their culture.</description></item><item><title>On the Nexus 7</title><link>https://hiltmon.github.io/blog/2012/06/28/on-the-nexus-7/</link><pubDate>Thu, 28 Jun 2012 09:07:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/06/28/on-the-nexus-7/</guid><description>Yesterday, Google announced the Nexus 7, their first hardware and software combination tablet.
In short, and in my opinion, they have created the reference platform for Android tablet development. Pair that with the Galaxy Nexus phone and you have the best Android pair since the iPhone/iPad duo, for development.
But until I need to develop for Android, I&amp;rsquo;m not going to buy one. I already have an iPad and an iPhone.</description></item><item><title>Mac App Store vs Buying Direct</title><link>https://hiltmon.github.io/blog/2012/06/03/mac-app-store-vs-buying-direct/</link><pubDate>Sun, 03 Jun 2012 16:56:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/06/03/mac-app-store-vs-buying-direct/</guid><description>Jonathan &amp;lsquo;Wolf&amp;rsquo; Rentzsch wrote a great article on Mac App Store vs Buying Direct, positing that application sandboxing tips the scale in buying direct.
I always prefer to buy direct because (using his words):
More Money Goes to the Developer: For a $10 application, only $7 goes to the developer when you buy it through the Mac App Store. For a direct purchase, it’s more on the order of $9.</description></item><item><title>Spike UI Teaser</title><link>https://hiltmon.github.io/blog/2012/04/19/spike-ui-teaser/</link><pubDate>Thu, 19 Apr 2012 18:49:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/04/19/spike-ui-teaser/</guid><description>Following on to last week&amp;rsquo;s Spike Solutions piece, I did some work on the second spike, to see if I could use CoreGraphics to render some of the UI components I want for the new product. Wow, worked out great, one less known unknown to deal with. Turns out, CoreGraphics does a lot of what you can do in PhotoShop, just in real time and on the GPU.
The following snaps were generated on the fly, quickly, using code, no image or artwork required, and the values change and update dynamically.</description></item><item><title>I love debugging</title><link>https://hiltmon.github.io/blog/2012/03/31/i-love-debugging/</link><pubDate>Sat, 31 Mar 2012 12:17:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/03/31/i-love-debugging/</guid><description>Rob Galankis tongue-in-cheek writing in Why I hate Test Driven Development:
&amp;hellip; So why do I hate TDD?
Because debugging is fun. There, I said it. I love debugging. I think lots of clever people like debugging. I love someone having a problem, coming to me, looking at it together, getting up to walk around, look at the ceiling, talk to myself, stand in front of a whiteboard, draw some lines that spark some idea, try it, manually test a fix out, slouch down in my chair staring at my computer lost in thought, and repeating this until I actually find and fix the problem.</description></item><item><title>Is Antivirus Software a Waste of Money?</title><link>https://hiltmon.github.io/blog/2012/03/05/is-antivirus-software-a-waste-of-money/</link><pubDate>Mon, 05 Mar 2012 13:25:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/03/05/is-antivirus-software-a-waste-of-money/</guid><description>Not astonishing at all in Wired&amp;rsquo;s Is Antivirus Software a Waste of Money? by Robert McMillan:
He doesn’t use antivirus software. As it turns out, many of his security-minded peers don’t use it either. The reason: If someone is going to try and attack them, they’re likely to use a new technique, one that most antivirus products will miss. “If you asked the average security expert whether they use antivirus or not,” Grossman says “a significant proportion of them do not.</description></item><item><title>A Spellchecker Used to Be a Major Feat of Software Engineering</title><link>https://hiltmon.github.io/blog/2012/01/23/a-spellchecker-used-to-be-a-major-feat-of-software-engineering/</link><pubDate>Mon, 23 Jan 2012 12:52:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/01/23/a-spellchecker-used-to-be-a-major-feat-of-software-engineering/</guid><description>A classic by James Hague entitled A Spellchecker Used to Be a Major Feat of Software Engineering.
Writing a spellchecker in the mid-1980s was a hard problem. Programmers came up with some impressive data compression methods in response to the spellchecker challenge. Likewise there were some very clever data structures for quickly finding words in a compressed dictionary. This was a problem that could take months of focused effort to work out a solution to.</description></item><item><title>Software is Eating the World</title><link>https://hiltmon.github.io/blog/2012/01/18/software-is-eating-the-world/</link><pubDate>Wed, 18 Jan 2012 09:33:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/01/18/software-is-eating-the-world/</guid><description>Marc Andreessen, writing in the WSJ Why Software Is Eating The World, writes:
More and more major businesses and industries are being run on software and delivered as online services—from movies to agriculture to national defense. Many of the winners are Silicon Valley-style entrepreneurial technology companies that are invading and overturning established industry structures.
The best evidence of Software eating the world, one that I think he missed, is that the Phone component on an iPhone or Android device is an app, just another piece of software!</description></item></channel></rss>