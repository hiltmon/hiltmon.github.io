<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Business on Hiltmon</title><link>https://hiltmon.github.io/tags/business/</link><description>Recent content in Business on Hiltmon</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 25 Jun 2013 22:39:00 -0400</lastBuildDate><atom:link href="https://hiltmon.github.io/tags/business/index.xml" rel="self" type="application/rss+xml"/><item><title>Back in the Saddle</title><link>https://hiltmon.github.io/blog/2013/06/25/back-in-the-saddle/</link><pubDate>Tue, 25 Jun 2013 22:39:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/06/25/back-in-the-saddle/</guid><description>TL;DR: I got a job! Gonna keep writing though.
As of this week, I&amp;rsquo;m back in the saddle in the finance industry, designing and developing leading edge platforms and systems for a new asset manager, my favorite kind of business. The challenges in the new firm are new to me and epic. And I love a good challenge.
How does this affect&amp;hellip;
My current consulting customers? Nothing changes, all your projects are in support and the support levels will continue unaffected.</description></item><item><title>Hedge Fund Systems</title><link>https://hiltmon.github.io/blog/2013/05/06/hedge-fund-systems/</link><pubDate>Mon, 06 May 2013 12:45:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/05/06/hedge-fund-systems/</guid><description>I have started a new series of articles on Hedge Fund Systems on my company, Noverse LLC blog. I did not post them here (yet) because I am not sure my readers will be interested – and I am using them to promote my skills and services. Let me know in comments you think I should post them here too.
But just in case you are interested in Hedge Fund systems (or my professional skills), the first post is called The Opportunity where I describe the opportunity I got starting in 2004 to design, develop and grow a brand new end-to-end Hedge Fund system for a completely fresh new business.</description></item><item><title>Say NO to Spec Work</title><link>https://hiltmon.github.io/blog/2012/10/19/say-no-to-spec-work/</link><pubDate>Fri, 19 Oct 2012 11:55:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/10/19/say-no-to-spec-work/</guid><description>TL;DR: Spec work is delivering creative work for free to prospective clients, encouraged by a bunch of work-listing or contest-hosting services. Say NO, even if that means you have quiet times, or you’ll never become a professional.
One of the negative things about being an indie is that the consulting and project work comes in fits and starts, and there are times, like now, when we have no client work to do at all (so contact me).</description></item><item><title>Estimating Software like it is</title><link>https://hiltmon.github.io/blog/2012/07/18/estimating-software-like-it-is/</link><pubDate>Wed, 18 Jul 2012 13:45:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/07/18/estimating-software-like-it-is/</guid><description>Software estimates are hard. Clients expect things to take little time (see It Should Only Take You a Few Hours&amp;hellip;) and cost little money. But the reality is that software is hard, there is lots to do, lots of work over and above just programming and it takes a lot more time and money to make good product. Most people underestimate the work to be done, or try to make the estimates look good, so most projects run over time and over budget because of this.</description></item><item><title>Cheap programmers cost more and ship less</title><link>https://hiltmon.github.io/blog/2012/07/14/cheap-programmers-cost-more-and-ship-less/</link><pubDate>Sat, 14 Jul 2012 16:34:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/07/14/cheap-programmers-cost-more-and-ship-less/</guid><description>I&amp;rsquo;ve been programming for 22 years. When I started Noverse two years ago as a professional software design and development company, I knew I would be competing against younger, cheaper programmers and masses of very cheap outsourced programmers.
A lot has happened over the past two years, and this article is about my own observations regarding the nature of this competition and how things have worked out for a lot of people I have spoken with who have chosen cheap.</description></item><item><title>Someone is coming to eat you</title><link>https://hiltmon.github.io/blog/2012/06/28/someone-is-coming-to-eat-you/</link><pubDate>Thu, 28 Jun 2012 08:49:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/06/28/someone-is-coming-to-eat-you/</guid><description>Michael Lopp, for Rands in Repose, wrote Someone is Coming to Eat You, a brilliant article on success and competition, well worth reading.
Apple’s current biggest competitor is itself, and I think Steve Jobs learned this the hard way - from the sidelines. When he returned, one of his first hires was a gentlemen named Tim Cook, and while Tim Cook holds a degree in industrial engineering, he is not an engineer, a designer, or a poet.</description></item><item><title>Compete to maintain, Disrupt to succeed</title><link>https://hiltmon.github.io/blog/2012/06/22/compete-to-maintain/</link><pubDate>Fri, 22 Jun 2012 12:13:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/06/22/compete-to-maintain/</guid><description>There is a huge difference between competing in a market and disrupting a market. When competing, a company tries to make a similar product in a given market segment, then competes against incumbent products on price or features to gain share and hopefully profits. When disrupting, a company produces a whole new product (or a viable derivative) that creates or changes a market, then dominates share and profits in that segment.</description></item><item><title>Single-pay, Ad-pay or Both-pay?</title><link>https://hiltmon.github.io/blog/2012/06/20/single-pay/</link><pubDate>Wed, 20 Jun 2012 10:10:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/06/20/single-pay/</guid><description>Author&amp;rsquo;s note: This article makes no point, takes no stand and argues no single position. I wrote it to see if I could come to come conclusion on which of &amp;lsquo;user-pay&amp;rsquo; vs &amp;lsquo;ad-pay&amp;rsquo; vs &amp;lsquo;both-pay&amp;rsquo; makes sense, and failed. But published it anyway to see if it spurs others smarter than me to explain and solve this conundrum.
It used to be in the old days when news was delivered to your home in paper form that the only way to get coupons or know about a sale at Macy&amp;rsquo;s was from the advertising in this newspaper.</description></item><item><title>Learn to Automate</title><link>https://hiltmon.github.io/blog/2012/06/20/learn-to-automate/</link><pubDate>Wed, 20 Jun 2012 08:57:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/06/20/learn-to-automate/</guid><description>It&amp;rsquo;s been almost six months since the Codecademy launched learn to code in 2012, headlined by Mayor Bloomberg. Lots of people pledged, lots signed up.
And I&amp;rsquo;ll be flabbergasted if any of them are still doing it.
I&amp;rsquo;m not going to go into why having everybody learn to code is a bad thing in detail, Jeff Attwood nails that in Please Don&amp;rsquo;t Learn to Code. Short version, it puts the method before the problem, programmers like to solve problems and create solutions, and the tool they mostly use is code.</description></item><item><title>The care and feeding of software engineers</title><link>https://hiltmon.github.io/blog/2012/06/17/the-care-and-feeding-of-software-engineers/</link><pubDate>Sun, 17 Jun 2012 13:21:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/06/17/the-care-and-feeding-of-software-engineers/</guid><description>Nicholas C. Zakas (@slicknet), writing in NCZOnline in The care and feeding of software engineers (or, why engineers are grumpy), writes:
And here’s the real crux of the problem: software engineers aren’t builders. Software engineers are creators. Building is what you do when you buy a piece of furniture from Ikea and get it home. The instructions are laid out and if you go step by step, you’ll get that comically small table you wanted.</description></item><item><title>I love my lawyers</title><link>https://hiltmon.github.io/blog/2012/06/15/i-love-my-lawyers/</link><pubDate>Fri, 15 Jun 2012 11:17:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/06/15/i-love-my-lawyers/</guid><description>As an experienced indie running my own business, there are things I know I am good at, things I know I am passable at and things that I simply cannot do. And one thing I will not do is enter into an engagement without a good contract. And I cannot do contracts. So one of the first things I did when I set up Noverse was to find and engage the best lawyers I could find to take care of this for me.</description></item><item><title>How support via Twitter works</title><link>https://hiltmon.github.io/blog/2012/06/06/how-support-via-twitter-works/</link><pubDate>Wed, 06 Jun 2012 16:21:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/06/06/how-support-via-twitter-works/</guid><description>Daniel Jalkut asked a question on Twitter
There are over 2000 items in my Keychain. So if I want to dump/migrate to e.g. @1Password, do I really have to approve every single access?
@danielpunkass
The gang at agilebits (makers of 1Password) respond with a set of scripts to completely solve his issue, no questions asked:
@danielpunkass https://gist.github.com/1583781
@1Password
That, friends, is how Twitter support should and does work.</description></item><item><title>Mac App Store vs Buying Direct</title><link>https://hiltmon.github.io/blog/2012/06/03/mac-app-store-vs-buying-direct/</link><pubDate>Sun, 03 Jun 2012 16:56:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/06/03/mac-app-store-vs-buying-direct/</guid><description>Jonathan &amp;lsquo;Wolf&amp;rsquo; Rentzsch wrote a great article on Mac App Store vs Buying Direct, positing that application sandboxing tips the scale in buying direct.
I always prefer to buy direct because (using his words):
More Money Goes to the Developer: For a $10 application, only $7 goes to the developer when you buy it through the Mac App Store. For a direct purchase, it’s more on the order of $9.</description></item><item><title>The Missing Feature Fallacy</title><link>https://hiltmon.github.io/blog/2012/05/26/the-missing-feature-fallacy/</link><pubDate>Sat, 26 May 2012 14:56:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/05/26/the-missing-feature-fallacy/</guid><description>If I had a dollar for every time a potential customer told me that they would buy my product if it just had this one missing feature, I&amp;rsquo;d have enough to pay rent, in a penthouse, in New York, with a view, for a year.
The assertion is that the customer would buy the product if I would implement the specified missing feature. The counterpoint assertion is that the customer perceives the product as useless without this missing feature, and the product becomes useful only because of the missing feature.</description></item><item><title>Stylizing my Services Agreement</title><link>https://hiltmon.github.io/blog/2012/05/22/stylizing-my-services-agreement/</link><pubDate>Tue, 22 May 2012 14:31:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/05/22/stylizing-my-services-agreement/</guid><description>I believe that everything that a person or company delivers to another should reflect their image, style, nature, professionalism and character. Which is why the look of the Noverse Professional Services Agreement drove me mad.
Don&amp;rsquo;t get me wrong. My attorney and his team are absolutely brilliant. The contract content is the best, it&amp;rsquo;s well written, well balanced, contains all the right terms and conditions for both sides, and my clients are all very happy to sign it as is.</description></item><item><title>My own support call line</title><link>https://hiltmon.github.io/blog/2012/05/18/my-own-support-call-line/</link><pubDate>Fri, 18 May 2012 11:08:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/05/18/my-own-support-call-line/</guid><description>My ideal vendor support line is a direct number to call the exact person I need to speak to for support. Unfortunately, this is not economic for vendors, especially since I may never call this lucky, and quite bored, person for support.
My second worst vendor support line is the most common, a 1800 number that puts one in the queue, where you wait, listening to a robotic voice tell you how long you still need to wait, like a lump.</description></item><item><title>Why Scope Creep is your fault</title><link>https://hiltmon.github.io/blog/2012/04/25/why-scope-creep-is-your-fault/</link><pubDate>Wed, 25 Apr 2012 13:00:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/04/25/why-scope-creep-is-your-fault/</guid><description>Christopher Butler writes in Why Scope Creep Is Your Fault (And What You Can Do To Prevent It):
Scope creep is like slowly loading up your plate with little portions of everything on the buffet until you realize man, this plate is getting heavy and omigod I can&amp;rsquo;t eat all of this, what was I thinking!
In essence, it&amp;rsquo;s just as much how we manage our clients as how we manage our work.</description></item><item><title>The Candle Problem</title><link>https://hiltmon.github.io/blog/2012/04/09/the-candle-problem/</link><pubDate>Mon, 09 Apr 2012 11:53:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/04/09/the-candle-problem/</guid><description>Graham Morehead, writing in nature.com in CEOs and the Candle Problem starts:
In America we have a motivation problem : money. I&amp;rsquo;m not a communist. I love capitalism (I even love money), but here&amp;rsquo;s a simple fact we&amp;rsquo;ve known since 1962: using money as a motivator makes us less capable at problem-solving. It actually makes us dumber.
Then he goes on to talk about the Candle problem and Functional fixedness, using them to explain how some CEO&amp;rsquo;s who are improperly motivated by money drive their businesses into ruin, something we have all seen in action.</description></item><item><title>Spike Solutions</title><link>https://hiltmon.github.io/blog/2012/04/06/spike-solutions/</link><pubDate>Fri, 06 Apr 2012 10:12:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/04/06/spike-solutions/</guid><description>I am a huge fan of throwing together a few spike solutions at the start of a project. I get the biggest technical problems solved early, I gain understanding of any pitfalls I may encounter and I can estimate the time and work better. I highly recommend the practice. A few days spent spiking solutions saves weeks and months later.
Get your geek on, were diving in.
A spike solution is a software project to figure out a tough technical or design problem (note: singular).</description></item><item><title>And this is why</title><link>https://hiltmon.github.io/blog/2012/04/01/and-this-is-why/</link><pubDate>Sun, 01 Apr 2012 12:35:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/04/01/and-this-is-why/</guid><description>Life, communication, programming, it&amp;rsquo;s all about structuring a rational argument. But too many people are either unable to, or are unwilling to, rationalize.
&amp;ldquo;I hold this opinion because I&amp;rsquo;ve read the facts and thought it through&amp;rdquo; matters. &amp;ldquo;I hold this opinion, and that&amp;rsquo;s it&amp;rdquo; doesn&amp;rsquo;t.
Ian Betteridge
Whether the argument is about creative design, system architecture, which restaurant to eat at or politics and religion, it&amp;rsquo;s critically important to express, clarify and declare the rationalization behind it.</description></item><item><title>Maker's Schedule, Manager's Schedule</title><link>https://hiltmon.github.io/blog/2012/03/31/makers-schedule-managers-schedule/</link><pubDate>Sat, 31 Mar 2012 12:06:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/03/31/makers-schedule-managers-schedule/</guid><description>Classic article by Paul Graham in 2009 called Maker&amp;rsquo;s Schedule, Manager&amp;rsquo;s Schedule.
One reason programmers dislike meetings so much is that they&amp;rsquo;re on a different type of schedule from other people. Meetings cost them more.
There are two types of schedule, which I&amp;rsquo;ll call the manager&amp;rsquo;s schedule and the maker&amp;rsquo;s schedule. The manager&amp;rsquo;s schedule is for bosses. It&amp;rsquo;s embodied in the traditional appointment book, with each day cut into one hour intervals.</description></item><item><title>Freemium Simulation Games prove Stupidity</title><link>https://hiltmon.github.io/blog/2012/03/25/freemium-simulation-games-prove-stupidity/</link><pubDate>Sun, 25 Mar 2012 13:26:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/03/25/freemium-simulation-games-prove-stupidity/</guid><description>&lt;p>I don&amp;rsquo;t get the allure and popularity of freemium time-based simulation games like Farmville, DragonVale, Tap Zoo, and Smurfs Village. Yet these games are the top grossing games on the App Store. So I decided to take one on to see if I can find the &amp;lsquo;it&amp;rsquo; factor that makes these games so enjoyable, popular and profitable, without paying real money to short-circuit the game.&lt;/p>
&lt;p>&lt;strong>tl;dr (Too Long; Didn&amp;rsquo;t Read)&lt;/strong>: You have got to be out of your mind to find these &amp;lsquo;games&amp;rsquo; enjoyable or worth spending money on. They are slow, skill and challenge lacking, chore-based, time-draining, naggy, annoying proofs of stupidity. The only conclusion I can draw from this experience is that people don&amp;rsquo;t value their time, have no self-respect and are just plain stupid to be playing and spending money on these products. &amp;ldquo;Men in Black&amp;rdquo; got it right: &amp;ldquo;A person is smart. People are dumb, panicky, dangerous animals and you know it&amp;rdquo;.&lt;/p></description></item><item><title>With In-App Coins, We're all Losers</title><link>https://hiltmon.github.io/blog/2012/03/17/with-in-app-coins/</link><pubDate>Sat, 17 Mar 2012 12:06:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/03/17/with-in-app-coins/</guid><description>&lt;p>There are a lot of games on the iPhone App Store that offer in-app purchases of game currency in order to enable players to either speed up the game, or to buy their way to higher levels, without adding additional content. Many of these games are offered free (the &lt;em>freemium&lt;/em> model), but make it difficult to play unless you buy these in-app coins.&lt;/p>
&lt;p>If &lt;em>you&lt;/em> do this, &lt;em>you&lt;/em> are a loser.&lt;/p>
&lt;p>If you do this, &lt;em>I&lt;/em> too become a loser.&lt;/p>
&lt;p>And I don&amp;rsquo;t like being a loser!&lt;/p></description></item><item><title>Not Your Free Tech Support</title><link>https://hiltmon.github.io/blog/2012/03/13/not-your-free-tech-support/</link><pubDate>Tue, 13 Mar 2012 12:56:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/03/13/not-your-free-tech-support/</guid><description>Friends, family, colleagues, I love you all, but I am not your free tech support guy. Computer programmers do not exist to fix your computer, printer or network problems, we don&amp;rsquo;t even fix our own. Do us all a favor, and stop asking us to fix your things, or worse, just expecting us to do so. We&amp;rsquo;re not interested. It&amp;rsquo;s not what we do. Move along.
In the last week, I received the following requests (reminding you I work from home, alone):</description></item><item><title>You Are Not Ruthless Enough</title><link>https://hiltmon.github.io/blog/2012/03/05/you-are-not-ruthless-enough/</link><pubDate>Mon, 05 Mar 2012 20:57:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/03/05/you-are-not-ruthless-enough/</guid><description>Chris Parker writing in You Are Not Ruthless Enough on being ruthless instead of lax when crafting software:
Being ruthless to yourself is having the discipline to become a better developer - not letting yourself get away with the easy or convenient. Being ruthless to your objects is having the discipline to write the API which separates their responsibilities effectively. The combination is what enables you to produce consistent results - to keep shipping, to keep creating great software, and to keep improving.</description></item><item><title>The 10 commandments of good source control management</title><link>https://hiltmon.github.io/blog/2012/03/05/the-10-commandments-of-good-source-control-management/</link><pubDate>Mon, 05 Mar 2012 20:36:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/03/05/the-10-commandments-of-good-source-control-management/</guid><description>Troy Hunt lists the The 10 commandments of good source control management in his blog. I use git and github for eveything, including this web site and blog.
Stop right now if you’re using VSS – just stop it! If it’s not in source control, it doesn’t exist Commit early, commit often and don’t spare the horses Always inspect your changes before committing Remember the axe-murderer when writing commit messages You must commit your own changes – you can’t delegate it Versioning your database isn’t optional Compilation output does not belong in source control Nobody else cares about your personal user settings Dependencies need a home too None of these things are hard.</description></item><item><title>Presenting a Professional Indie Image</title><link>https://hiltmon.github.io/blog/2012/03/05/presenting-a-professional-indie-image/</link><pubDate>Mon, 05 Mar 2012 12:48:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/03/05/presenting-a-professional-indie-image/</guid><description>In Presenting a Professional Indie Image on the Noverse Blog, I present a checklist of all the things you need as an indie to present yourself to strangers via email with some credibility:
You are what you do, not what you say. &amp;ndash; C.G. Jung
As my Hiltmon.com blog takes off, I am starting to get emails from indie developers promoting their wares. This is great, I love getting them, looking at new products and helping out where I can.</description></item><item><title>Thank you for a great February</title><link>https://hiltmon.github.io/blog/2012/03/01/thank-you-for-a-great-february/</link><pubDate>Thu, 01 Mar 2012 11:13:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/03/01/thank-you-for-a-great-february/</guid><description>&lt;p>It&amp;rsquo;s been two months since I consolidated all my sites into this blog and started writing more. This blog just has a great February and I thought I&amp;rsquo;d share some stats.&lt;/p></description></item><item><title>Your idea sucks, now go do it anyway</title><link>https://hiltmon.github.io/blog/2012/02/03/your-idea-sucks/</link><pubDate>Fri, 03 Feb 2012 10:26:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/02/03/your-idea-sucks/</guid><description>Lovely article by Jason Cohen, worth a read, called Your idea sucks, now go do it anyway makes a great point on how the original idea for something usually evolves into something completely different, and success comes from embracing that evolution.
“My idea isn’t good enough yet” explained a friend who is thinking of starting his own company. He’s waiting for the idea to be completely fleshed out before taking the leap.</description></item><item><title>The paradox of choice</title><link>https://hiltmon.github.io/blog/2012/02/01/the-paradox-of-choice/</link><pubDate>Wed, 01 Feb 2012 10:41:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/02/01/the-paradox-of-choice/</guid><description>People desire more choices, yet are unable to choose when the selection is greater, that is the paradox of choice.
Sheena Iyengar, a professor of business at Columbia University, conducted an interesting study in 1995. She set up a display of 24 samples of jam for customers to taste, and every few hours, she switched to a 6 sample set. The results were astonishing: 60% of customers stopped to try the jams when the selection was large versus 40% when small; and 30% of those that stopped when the selection was small purchased a jam, versus 3% when the selection was large.</description></item><item><title>Childlike Wonder</title><link>https://hiltmon.github.io/blog/2012/02/01/childlike-wonder/</link><pubDate>Wed, 01 Feb 2012 10:31:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/02/01/childlike-wonder/</guid><description>Ever watch a child with an iPad? They seem to get it immediately, they prod and tap and swipe and rotate and in no time at all seem comfortable with it.
Ever watch an adult with an iPad? They hold it, and stare at it, and, well, stare some more, and maybe wave a finger near it, but hesitate to touch. And after all that staring and hesitating, they remain uncomfortable with it.</description></item><item><title>Fragility of Free</title><link>https://hiltmon.github.io/blog/2012/01/29/fragility-of-free/</link><pubDate>Sun, 29 Jan 2012 11:49:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/01/29/fragility-of-free/</guid><description>A great article by Ben Brooks called Fragility of Free, well worth a read:
The fragility of free is a catchy term that describes what happens when the free money runs out. Or — perhaps more accurately — when the investors/founders/venture capitalists run out of cash, or patience, or both. Because at some point Twitter and all other companies have to make the move from ‘charity’ to ‘business’ — or, put another way, they have to make the move from spending tons of money to making slightly more money than they spend.</description></item><item><title>Test Driven Development Really Works</title><link>https://hiltmon.github.io/blog/2012/01/26/test-driven-development-really-works/</link><pubDate>Thu, 26 Jan 2012 11:09:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/01/26/test-driven-development-really-works/</guid><description>In 2008, Nachiappan Nagappan, E. Michael Maximilien, Thirumalesh Bhat, and Laurie Williams wrote a paper called “Realizing quality improvement through test driven development: results and experiences of four industrial teams“ (PDF link). The abstract:
Test-driven development (TDD) is a software development practice that has been used sporadically for decades. With this practice, a software engineer cycles minute-by-minute between writing failing unit tests and writing implementation code to pass those tests.</description></item><item><title>Where the light is better</title><link>https://hiltmon.github.io/blog/2012/01/26/where-the-light-is-better/</link><pubDate>Thu, 26 Jan 2012 10:30:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/01/26/where-the-light-is-better/</guid><description>A woman comes across a man crawling under a street lamp. &amp;ldquo;I&amp;rsquo;ve lost my car keys,&amp;rdquo; he explains.
The woman tries to help the man find his keys. After a few minutes of searching, she asks &amp;ldquo;Where exactly did you drop them?&amp;rdquo;
&amp;ldquo;Down the street, next to my car.&amp;rdquo;
Puzzled, she asks &amp;ldquo;Then why aren&amp;rsquo;t you looking over there?&amp;rdquo;
&amp;ldquo;The light is better here.&amp;rdquo;
People often look where it seems easiest or most convenient to look, rather than in a more difficult, but more correct place.</description></item><item><title>Trade Trade Secrets</title><link>https://hiltmon.github.io/blog/2012/01/24/trade-trade-secrets/</link><pubDate>Tue, 24 Jan 2012 09:38:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/01/24/trade-trade-secrets/</guid><description>A brilliant essay by Danielle Fong called Trade Trade Secrets, very worth a read, covers everything from Intellectual Property, to explaining the differences between theft, transcription, transformation and inspiration, to how the law stifles all four of them.
The great danger of laws that ignore these is not that they will prevent theft, but that they will so heavyhandedly prevent transformation and inspiration: the engines of our entire civilization.</description></item><item><title>Make a better product</title><link>https://hiltmon.github.io/blog/2012/01/18/make-a-better-product/</link><pubDate>Wed, 18 Jan 2012 13:12:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/01/18/make-a-better-product/</guid><description>Rich Siegel, of BBEdit fame, in his blog article Bar Sopa, makes the right point on piracy:
A good way to do this is to make a product for which more people want to pay a fair price than who are willing to steal it.
and
Take the money you would have spent on fighting piracy and use it to make a better product and/or service. Making more laws is not the answer.</description></item><item><title>It should only take you a few hours...</title><link>https://hiltmon.github.io/blog/2012/01/11/it-should-only-take-you-a-few-hours-dot-dot-dot/</link><pubDate>Wed, 11 Jan 2012 22:55:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/01/11/it-should-only-take-you-a-few-hours-dot-dot-dot/</guid><description>It sure seems easy to make a table. Anyone can do it, right? Get 1 large flat rectangular piece of wood, 4 equally tall wooden poles, 4 nails and a hammer. Nail the 4 poles to each corner of the flat rectangular bit, and you have a table. Ta daaa!
Now ask a carpenter to craft you a table. First they will spend time discussing the purpose and function of the table - indoor or outdoor, kitchen or dining room, for show or heavy use, what load does it need to bear.</description></item></channel></rss>