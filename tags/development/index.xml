<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development on Hiltmon</title><link>https://hiltmon.com/tags/development/</link><description>Recent content in Development on Hiltmon</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Jan 2023 11:17:10 -0500</lastBuildDate><atom:link href="https://hiltmon.com/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Increasing File Descriptor Ulimit on MacOs</title><link>https://hiltmon.com/blog/2023/01/01/increasing-file-descriptor-ulimit-on-macos/</link><pubDate>Sun, 01 Jan 2023 11:17:10 -0500</pubDate><guid>https://hiltmon.com/blog/2023/01/01/increasing-file-descriptor-ulimit-on-macos/</guid><description>Warning: This post is only for developers who are having issues when coding against file descriptors in the form of C-style file handles or sockets on MacOS. For everyone else, this does not apply.
Running out of Resources Right now I am developing an application that uses sockets (underneath a stack of other software) for inter-process communication. The problem is that after a few debug runs or crashes (I did say developing), the application will not start again from resource starvation.</description></item><item><title>Dependency Limited and Conflict Free C++</title><link>https://hiltmon.com/blog/2016/03/25/dependency-limited-and-conflict-free-c-plus-plus/</link><pubDate>Fri, 25 Mar 2016 08:57:53 -0400</pubDate><guid>https://hiltmon.com/blog/2016/03/25/dependency-limited-and-conflict-free-c-plus-plus/</guid><description>TL;DR: Beware of libraries you need to compile yourself and copy-pasted code, the performance, maintenance and other hellscapes you create are not worth it in the medium and long run:
Do not use dependencies that have dependencies that you have to compile. Do not use libraries depended on by dependencies anywhere else. Solve your own problems and understand the solutions. Do not copy-paste from the web. Always write your own code where performance and maintenance is critical.</description></item><item><title>C++11 on CentOS 6.6</title><link>https://hiltmon.com/blog/2015/08/09/c-plus-plus-11-on-centos-6-dot-6/</link><pubDate>Sun, 09 Aug 2015 18:07:25 -0400</pubDate><guid>https://hiltmon.com/blog/2015/08/09/c-plus-plus-11-on-centos-6-dot-6/</guid><description>As mentioned in previous articles, I write a lot of C++11 code on OS X but deploy it on CentOS Linux 6.6 servers. But CentOS 6.6 does not contain a C++11 development environment by default.
Here&amp;rsquo;s how to set one up.
Install a C++11 Compiler We need to get the repo files for DevTools2, a Red Hat package that contains a supported C++11 compiler. As root, run the following command to retrieve the repo file:</description></item><item><title>Simple C++: From Makefiles to Xcode Builds</title><link>https://hiltmon.com/blog/2015/08/01/simple-c-plus-plus-from-makefiles-to-xcode-builds/</link><pubDate>Sat, 01 Aug 2015 11:25:51 -0400</pubDate><guid>https://hiltmon.com/blog/2015/08/01/simple-c-plus-plus-from-makefiles-to-xcode-builds/</guid><description>&lt;p>This post will present a step-by-step process to convert C++/C++11 Makefile-based projects to Xcode build tools. I use it all the time to set up, convert, build and debug Unix/Linux executables that I develop on my Macintosh.&lt;/p></description></item><item><title>Simple C++ Testing with Catch in Xcode</title><link>https://hiltmon.com/blog/2014/10/26/simple-c-plus-plus-testing-with-catch-in-xcode/</link><pubDate>Sun, 26 Oct 2014 14:34:32 -0400</pubDate><guid>https://hiltmon.com/blog/2014/10/26/simple-c-plus-plus-testing-with-catch-in-xcode/</guid><description>Catch is a simple, open-source, dependency-free unit testing framework for C++ projects. In this post I show you how to use it in a Simple C++ Project from Xcode.
Why Catch? I am writing fast C++ libraries for work and need to wrap them in unit tests to ensure that they continue to operate and perform as they evolve. My number one constraint is that these libraries must be dependency-free.</description></item><item><title>Homebrew Happiness</title><link>https://hiltmon.com/blog/2013/09/29/homebrew-happiness/</link><pubDate>Sun, 29 Sep 2013 12:12:00 -0400</pubDate><guid>https://hiltmon.com/blog/2013/09/29/homebrew-happiness/</guid><description>If you are expecting an article about beer, this is not it. This is about the best product that helps install and manage the Open Source software on the Macintosh computer that Apple decided not to include in OS X.
In short, I use a lot of Open Source products for work, like postgresql, redis, mongo, node, boost libraries and rbenv. Installing and managing them natively on a Mac was a pain.</description></item><item><title>Xcode and the Simple C++ Project Structure</title><link>https://hiltmon.com/blog/2013/07/05/xcode-and-the-simple-c-plus-plus-project-structure/</link><pubDate>Fri, 05 Jul 2013 11:31:00 -0400</pubDate><guid>https://hiltmon.com/blog/2013/07/05/xcode-and-the-simple-c-plus-plus-project-structure/</guid><description>In a previous post, I talked about a A Simple C++ Project Structure that I am using to create a bunch of high-speed daemons for work.
It&amp;rsquo;s been fun using TextMate 2 and a Terminal to make and run the project, but now that I am getting to the meat of the coding, I&amp;rsquo;d prefer to use an IDE to help me navigate and debug the code.
Here&amp;rsquo;s how to set up Xcode 4 on the Mac to compile using our Makefile and run/debug the application.</description></item><item><title>Using the Spike Folder</title><link>https://hiltmon.com/blog/2013/07/04/using-the-spike-folder/</link><pubDate>Thu, 04 Jul 2013 17:48:00 -0400</pubDate><guid>https://hiltmon.com/blog/2013/07/04/using-the-spike-folder/</guid><description>In yesterday&amp;rsquo;s post A Simple C++ Project Structure, I mentioned the spike folder. In today&amp;rsquo;s post, I&amp;rsquo;ll write more about how I use it.
By the way, I have previously written about spike solutions, wherein I create solutions for the bigger technical problems at the start of a project to be sure they are achievable. This is different.
In this case, being back in C++ and rusty as an old door hinge, I also needed to create and test out snippets of code I could be using without having to make and run the entire product.</description></item><item><title>A Simple C++ Project Structure</title><link>https://hiltmon.com/blog/2013/07/03/a-simple-c-plus-plus-project-structure/</link><pubDate>Wed, 03 Jul 2013 22:33:00 -0400</pubDate><guid>https://hiltmon.com/blog/2013/07/03/a-simple-c-plus-plus-project-structure/</guid><description>One of the things I need in my new job is a bunch of blazingly fast daemons to capture market information and trade data. I prototyped them in Ruby to see what comes down the line, but I have the need, the need for speed. Which means I need a UNIX C or C++ framework.
So I went old-school. Retro even. Plain old C++. My favorite programmer&amp;rsquo;s editor. And the good old terminal, er, iTerm 2, just Mac-like.</description></item><item><title>Mixing Legacy and Modern Web Development on OS X Mountain Lion</title><link>https://hiltmon.com/blog/2013/03/20/mixing-legacy-and-modern-web-development-on-os-x-mountain-lion/</link><pubDate>Wed, 20 Mar 2013 16:42:00 -0400</pubDate><guid>https://hiltmon.com/blog/2013/03/20/mixing-legacy-and-modern-web-development-on-os-x-mountain-lion/</guid><description>&lt;p>Over the past few years I have been developing &lt;em>modern&lt;/em> web applications like &lt;a href="http://www.kifuapp.com">Kifu&lt;/a> on my laptop using &lt;a href="https://rubyonrails.org/">Ruby on Rails&lt;/a>, &lt;a href="http://www.sinatrarb.com">Sinatra&lt;/a>, &lt;a href="http://octopress.org">Octopress&lt;/a>, and &lt;a href="http://nodejs.org">Node.js&lt;/a> powered by &lt;a href="http://pow.cx">Pow&lt;/a>. But over the next few weeks I&amp;rsquo;ll be helping a friend upgrade a bunch of older legacy static (plain HTML), &lt;a href="http://php.net">PHP&lt;/a> and &lt;a href="http://wordpress.org">Wordpress&lt;/a> sites.&lt;/p>
&lt;p>I &lt;em>do&lt;/em> want to keep using the same smooth workflow processes as I have now. But I do &lt;em>not&lt;/em> want to clutter up my pristine OS X installation to do it. So this is how I have my &lt;em>modern&lt;/em> web development environment set up, and how I have added &lt;em>almost seamless&lt;/em> legacy development capability to it.&lt;/p></description></item></channel></rss>