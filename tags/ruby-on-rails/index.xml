<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ruby on Rails on Hiltmon</title><link>https://hiltmon.com/tags/ruby-on-rails/</link><description>Recent content in Ruby on Rails on Hiltmon</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 14 Oct 2013 13:58:00 -0400</lastBuildDate><atom:link href="https://hiltmon.com/tags/ruby-on-rails/index.xml" rel="self" type="application/rss+xml"/><item><title>Rails Tricks - Sharing the Model</title><link>https://hiltmon.com/blog/2013/10/14/rails-tricks-sharing-the-model/</link><pubDate>Mon, 14 Oct 2013 13:58:00 -0400</pubDate><guid>https://hiltmon.com/blog/2013/10/14/rails-tricks-sharing-the-model/</guid><description>I am building a series of Rails applications for different users and use cases, but they all hang off the same database schema. Using canonical Rails, that means a single, massive rails app with a bunch of controllers, a heap of views and a complex security model.
I prefer small, focussed apps, so I decided to share the model instead. Here&amp;rsquo;s how it works.
Sharing the model Lets call the the first rails project Master.</description></item><item><title>Ruby Tempfile Aggressive Unlink</title><link>https://hiltmon.com/blog/2013/01/11/ruby-tempfile-aggressive-unlink/</link><pubDate>Fri, 11 Jan 2013 10:49:00 -0400</pubDate><guid>https://hiltmon.com/blog/2013/01/11/ruby-tempfile-aggressive-unlink/</guid><description>I often use Ruby’s Tempfile class when generating files in Rails for download. But something went wrong in the Rails 3.2.11 update.
Here is the code I normally use (as per the Tempfile documentation):
... begin temp = Tempfile.new(“temp-file-name.xlsx”) report = ReportClass.new(temp.path, params) report.generate send_file temp.path, :filename =&amp;gt; “#{user_file_name}.xlsx&amp;#34;, :type =&amp;gt; &amp;#34;application/xlsx&amp;#34; ensure temp.close temp.unlink end ... In short, create a temp file, stream the data to it in the report class, then send the file to the user.</description></item><item><title>Quick and Dirty Rails Performance Profiling</title><link>https://hiltmon.com/blog/2012/02/27/quick-and-dirty-rails-performance-profiling/</link><pubDate>Mon, 27 Feb 2012 22:46:00 -0400</pubDate><guid>https://hiltmon.com/blog/2012/02/27/quick-and-dirty-rails-performance-profiling/</guid><description>&lt;p>When I find some Ruby on Rails or Rake tasks running slowly, I throw a quick and dirty profiler around the suspect code to find the bottlenecks with ease. Here&amp;rsquo;s how I do it, maybe this approach can help you too.&lt;/p></description></item><item><title>2011 Platforms - Ruby on Rails</title><link>https://hiltmon.com/blog/2011/12/26/2011-platforms-ruby-on-rails/</link><pubDate>Mon, 26 Dec 2011 11:55:00 -0400</pubDate><guid>https://hiltmon.com/blog/2011/12/26/2011-platforms-ruby-on-rails/</guid><description>&lt;p>&lt;em>Part 2 of the platforms I used in 2011 to make products. See &lt;a href="https://hiltmon.com/blog/2011/12/26/2011-platforms-objective-c-and-ios/">Part 1 - Objective-C and iOS&lt;/a>.&lt;/em>&lt;/p>
&lt;p>The second half of 2011 was spent developing two web app products using Ruby on Rails. And what a joy this platform is to use.&lt;/p></description></item></channel></rss>