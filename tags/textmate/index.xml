<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TextMate on Hiltmon</title><link>https://hiltmon.github.io/tags/textmate/</link><description>Recent content in TextMate on Hiltmon</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Oct 2014 12:44:44 -0400</lastBuildDate><atom:link href="https://hiltmon.github.io/tags/textmate/index.xml" rel="self" type="application/rss+xml"/><item><title>Gist TextMate Bundle updated for Yosemite</title><link>https://hiltmon.github.io/blog/2014/10/18/gist-textmate-bundle-updated-for-yosemite/</link><pubDate>Sat, 18 Oct 2014 12:44:44 -0400</pubDate><guid>https://hiltmon.github.io/blog/2014/10/18/gist-textmate-bundle-updated-for-yosemite/</guid><description>Thanks to Michael Sheets, the Gist TextMate bundle now works in TextMate 2 on Yosemite. The issue was that the UI code in TextMate 2 relied on Ruby 1.8, and Ruby 1.8 is deprecated and no longer installed in OS X 10.10.
Michael created a shim to fake Ruby 1.8 until such time as the code base moves to Ruby 2.0, implemented the change in the Gist bundle and it&amp;rsquo;s working now.</description></item><item><title>More TextMate 2 Basics</title><link>https://hiltmon.github.io/blog/2014/01/20/more-textmate-2-basics/</link><pubDate>Mon, 20 Jan 2014 14:07:30 -0500</pubDate><guid>https://hiltmon.github.io/blog/2014/01/20/more-textmate-2-basics/</guid><description>Previously, I wrote about the TextMate 2 Basics that I use all the time, and I recommend you read that post first. This post follows up with a mish-mash of more tools, ideas and tricks that I also use surprisingly frequently.
Text Tools TextMate 2 tries to reduce the number of keystrokes you need to make to generate good code. There are many ways it does this but today I want to talk about auto-pairs and completions.</description></item><item><title>TextMate 2 Basics</title><link>https://hiltmon.github.io/blog/2013/11/09/textmate-2-basics/</link><pubDate>Sat, 09 Nov 2013 15:00:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/11/09/textmate-2-basics/</guid><description>I have been using TextMate for years as my primary programmer&amp;rsquo;s editor, but it turns out that I only use a subset of its amazing features. I&amp;rsquo;ve been speaking with users of other awesome programmer&amp;rsquo;s editors and they wanted to know what it is in TextMate that I love so much and keeps me using it.
So here are the basic parts of TextMate 2 that I use regularly. Maybe you can divine some tips from it.</description></item><item><title>Gist TextMate 2 Bundle Updates</title><link>https://hiltmon.github.io/blog/2013/08/11/gist-textmate-2-bundle-updates/</link><pubDate>Sun, 11 Aug 2013 15:31:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/08/11/gist-textmate-2-bundle-updates/</guid><description>New updates to the Gist.tmbundle for TextMate 2:
Changed the launch key from ⌃⌘G to ⇧⌃⌘J as it interferes with the Find and Replace All (the TextMate 2 defaults changed) Am now having GitHub guess the language of a &amp;ldquo;Gist from Selection&amp;rdquo; by taking the file extension from the source file you copied from and using that in the pushed file name. Was hoping to use the scope language but could not figure how to get that and map the right extensions for GitHub.</description></item><item><title>Laravel 4 Blade TextMate Bundle</title><link>https://hiltmon.github.io/blog/2013/07/28/laravel-4-textmate-bundle/</link><pubDate>Sun, 28 Jul 2013 11:37:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/07/28/laravel-4-textmate-bundle/</guid><description>In the comments of My TextMate 2 Setup, reader Bob Rockerfeller wondered if the Sublime Text Laravel 4 Blade bundle could be ported to TextMate 2. So I did.
It was easy because Sublime Text uses TextMate&amp;rsquo;s .tmLanguage file format for syntax highlighting. I just created a new bundle using the Bundle Editor, created a new Syntax file and pasted in Eric Percifield&amp;rsquo;s (@medalink7) code. Then tested it with the example in his repo.</description></item><item><title>Gist.tmbundle Updates</title><link>https://hiltmon.github.io/blog/2013/03/11/gist-dot-tmbundle-updates/</link><pubDate>Mon, 11 Mar 2013 16:59:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/03/11/gist-dot-tmbundle-updates/</guid><description>I just pushed a few small updates to my Gists bundle for TextMate 2. These include:
Adding progress bars for network access (Thanks for the suggestion and tip from Allan Odgaard). New: Add file to Gist command to add the current file to an existing Gist to create multi-file Gists. For example, use this to gist the header and implementation code files in the same gist. This gets cached so you can blindly update any of the files in a multi-file gist without remembering the gist ID.</description></item><item><title>Gist TextMate Bundle and Command Line</title><link>https://hiltmon.github.io/blog/2013/02/25/gist-textmate-bundle-and-command/</link><pubDate>Mon, 25 Feb 2013 15:44:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/02/25/gist-textmate-bundle-and-command/</guid><description>I was having a conversation on Twitter with Shawn Hansen (@geekles) this weekend and he mentioned that Sublime Text 2 has a great plugin for Github Gists, and TextMate 2 was missing this awesomeness.
Not anymore (the Oscars were on).
Announcing the first release of my TextMate 2 bundle and a separate command line tool for retrieving, creating and updating GitHub Gists.
The main difference between this and other implementations is that this one caches gist mappings (gist id to file names in ~/.</description></item><item><title>Multiple Themes in TextMate 2</title><link>https://hiltmon.github.io/blog/2013/02/22/multiple-themes-in-textmate-2/</link><pubDate>Fri, 22 Feb 2013 18:02:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/02/22/multiple-themes-in-textmate-2/</guid><description>One thing I like to do is to have different themes for different file types in my text editor. That way, at a glance, I can guess what kind of file a text-filled window contains, especially when zoomed out using Mission Control. I’ve been using Custom Language Preferences in BBEdit preferences to set up the color scheme for each file type there, and I have set up Multiple Themes in Sublime Text 2 previously.</description></item><item><title>CriticMarkup Bundle for TextMate 2</title><link>https://hiltmon.github.io/blog/2013/02/15/criticmarkup-bundle-for-textmate-2/</link><pubDate>Fri, 15 Feb 2013 12:38:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/02/15/criticmarkup-bundle-for-textmate-2/</guid><description>Update: Christian Tietze (@DivineDominion) has created a bundle that&amp;rsquo;s included in the official toolkit, so I contributed my bundle&amp;rsquo;s commands to that, and will be using and contributing to that one from now on. Get the full toolkit at CriticMarkup-toolkit or just the TextMate bundle at criticmarkup.tmbundle. I&amp;rsquo;ve already taken my repo down to prevent confusion.
Recently, @macdrifter and @themindfulbit announced CriticMarkup, a way for authors and editors to track changes to documents in plain text.</description></item><item><title>RVM in TextMate 2</title><link>https://hiltmon.github.io/blog/2013/01/16/rvm-in-textmate-2/</link><pubDate>Wed, 16 Jan 2013 20:04:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/01/16/rvm-in-textmate-2/</guid><description>I use Ruby Version Manager (rvm) to manage the interpreters and gemsets for all of my projects. But the default install of TextMate 2 uses the system ruby interpreter for internal command execution as well as for external runs. Here is how to use your rvm environment for both.
tl;dr: Set the TM_RUBY variable in preferences or your ~/.tm_properties file to the path returned by which rvm-auto-ruby and restart. That will set the internal runner.</description></item><item><title>Back to TextMate 2</title><link>https://hiltmon.github.io/blog/2013/01/14/back-to-textmate-2/</link><pubDate>Mon, 14 Jan 2013 22:01:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2013/01/14/back-to-textmate-2/</guid><description>I spent the latter half of 2012 trying out new programmer’s editors, getting them set up the way I like and getting productive in them. This was no fly-by-night few-hour test, it was full-monty Rails development work for months. Lots of shell scripts, file manipulations, formats, different programming languages, different platforms, all my programming activities.
I tried BBEdit for programming, and it is good. BBEdit remains my text editing and file manipulation tool of choice and I suspect it always will be.</description></item><item><title>Textmate 2 is now Open Source</title><link>https://hiltmon.github.io/blog/2012/08/09/textmate-2-is-now-open-source/</link><pubDate>Thu, 09 Aug 2012 11:07:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/08/09/textmate-2-is-now-open-source/</guid><description>My favorite programmers editor of all time, TextMate, recently updated to TextMate 2 Alpha. I’ve been using the alpha for a while, still love it, but it&amp;rsquo;s an alpha release and therefore buggy and slow. So I’ve been trying out Sublime Text 2 as a replacement. So far, I switch between TextMate 2 Alpha and Sublime Text 2 daily, only because closing the last tab in TextMate 2 closes the darn project editor and that annoys me.</description></item><item><title>Quick and Dirty Rails Performance Profiling</title><link>https://hiltmon.github.io/blog/2012/02/27/quick-and-dirty-rails-performance-profiling/</link><pubDate>Mon, 27 Feb 2012 22:46:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2012/02/27/quick-and-dirty-rails-performance-profiling/</guid><description>&lt;p>When I find some Ruby on Rails or Rake tasks running slowly, I throw a quick and dirty profiler around the suspect code to find the bottlenecks with ease. Here&amp;rsquo;s how I do it, maybe this approach can help you too.&lt;/p></description></item><item><title>2011 Platforms - Ruby on Rails</title><link>https://hiltmon.github.io/blog/2011/12/26/2011-platforms-ruby-on-rails/</link><pubDate>Mon, 26 Dec 2011 11:55:00 -0400</pubDate><guid>https://hiltmon.github.io/blog/2011/12/26/2011-platforms-ruby-on-rails/</guid><description>&lt;p>&lt;em>Part 2 of the platforms I used in 2011 to make products. See &lt;a href="https://hiltmon.com/blog/2011/12/26/2011-platforms-objective-c-and-ios/">Part 1 - Objective-C and iOS&lt;/a>.&lt;/em>&lt;/p>
&lt;p>The second half of 2011 was spent developing two web app products using Ruby on Rails. And what a joy this platform is to use.&lt;/p></description></item></channel></rss>