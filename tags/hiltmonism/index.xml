<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hiltmonism on Hiltmon</title><link>https://hiltmon.com/tags/hiltmonism/</link><description>Recent content in Hiltmonism on Hiltmon</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 04 Oct 2022 10:17:50 -0400</lastBuildDate><atom:link href="https://hiltmon.com/tags/hiltmonism/index.xml" rel="self" type="application/rss+xml"/><item><title>Discoverability Is Deserved</title><link>https://hiltmon.com/blog/2022/10/04/hiltmonism-discoverability-is-deserved/</link><pubDate>Tue, 04 Oct 2022 10:17:50 -0400</pubDate><guid>https://hiltmon.com/blog/2022/10/04/hiltmonism-discoverability-is-deserved/</guid><description>Discoverability is the user&amp;rsquo;s ability to find key information, features, services and capabilities in a software application. It enables users to locate, see, learn and understand what capabilities the software provides.
If users cannot discover a capability, how will they know it exists in the application in the first place?
Designers and developers need to keep this in mind when architecting and structuring applications. They need to not only focus on what is being provided, and how users can use it, but also on how users can find it.</description></item><item><title>Stop and Think</title><link>https://hiltmon.com/blog/2018/06/17/stop-and-think/</link><pubDate>Sun, 17 Jun 2018 09:21:04 -0400</pubDate><guid>https://hiltmon.com/blog/2018/06/17/stop-and-think/</guid><description>When I started out as a developer and designer, I know I was clever. When folks asked me to design and develop a software product, I would ask a few questions to confirm that I understood what was asked of me, listen to their answers, then set about making the product. Request, build, ship. Easy!
My mentor, who was definitely smarter than me, used to yell at me to Stop and Think.</description></item><item><title>Talk to Drivers, not Mechanics</title><link>https://hiltmon.com/blog/2016/03/14/talk-to-drivers/</link><pubDate>Mon, 14 Mar 2016 20:26:13 -0400</pubDate><guid>https://hiltmon.com/blog/2016/03/14/talk-to-drivers/</guid><description>How many people really know how their motor vehicle works, or even care to. Very few.
But they all drive.
And when their car breaks down or makes a noise or that ridiculous engine light comes on, they need mechanics. Nobody, except other mechanics, understands the explanation of whats wrong with the car. And therein lies the problem.
Mechanics need to learn to talk to drivers, not mechanics.
Techs are the Mechanics Technology people are perceived to be painfully shy.</description></item><item><title>Seeing the Bigger Picture</title><link>https://hiltmon.com/blog/2015/01/31/seeing-the-bigger-picture/</link><pubDate>Sat, 31 Jan 2015 10:23:51 -0500</pubDate><guid>https://hiltmon.com/blog/2015/01/31/seeing-the-bigger-picture/</guid><description>It is quite astounding to me that an astonishing amount of work is done and code written without any knowledge, view or understanding of the bigger picture. And yet no-one seems to have taken the time to consider just how remarkably ridiculous this common situation is. How can people be expected to perform at their best and create the best products when they have no clue as to what the big picture or goal is?</description></item><item><title>StackOverflow Programming</title><link>https://hiltmon.com/blog/2015/01/17/stackoverflow-programming/</link><pubDate>Sat, 17 Jan 2015 16:11:13 -0500</pubDate><guid>https://hiltmon.com/blog/2015/01/17/stackoverflow-programming/</guid><description>StackOverflow Programming happens when much of the functionality of an application is copied and pasted from the code examples found on StackOverflow. Unfortunately, it&amp;rsquo;s becoming the most popular and common programming paradigm amongst younger programmers, leading to (1) shockingly shoddy, bug laden, slow, incomprehensible, unmaintainable programs that work only once, and (2) to programmers who do not understand what they are doing, their work and how to solve problems.
For example1, one of my interns came into my office this week to see if there was a way to do dates and times easily in C++.</description></item><item><title>On the floor</title><link>https://hiltmon.com/blog/2014/06/22/hiltmonism-on-the-floor/</link><pubDate>Sun, 22 Jun 2014 11:37:20 -0400</pubDate><guid>https://hiltmon.com/blog/2014/06/22/hiltmonism-on-the-floor/</guid><description>At least once a month, step out of your cubicle or office and spend a day on the floor. It will make you a better software designer and developer, it will help you make better software for the folks on the floor, and it will build a better relationship with them so issues and ideas can flow.
I spent Friday on the floor of my work. As I do at least once a month.</description></item><item><title>The Process is not the Product</title><link>https://hiltmon.com/blog/2013/04/29/hiltmonism-the-process-is-not-the-product/</link><pubDate>Mon, 29 Apr 2013 19:49:00 -0400</pubDate><guid>https://hiltmon.com/blog/2013/04/29/hiltmonism-the-process-is-not-the-product/</guid><description>Or how many people get so stuck in the processes of how to do the job, they simply forget to actually do the job. Many a product has failed to materialize because the process to make that product has gotten mired, stuck, distracted or waylaid. It becomes about the people and the politics and the process and no longer about the product.
I use this Hiltmonism to help me to focus on the goal, the reason we are creating the product, and the need to be ruthless in getting it done.</description></item><item><title>Workflow is Functionality</title><link>https://hiltmon.com/blog/2012/11/27/hiltmonism-workflow-is-functionality/</link><pubDate>Tue, 27 Nov 2012 17:39:00 -0400</pubDate><guid>https://hiltmon.com/blog/2012/11/27/hiltmonism-workflow-is-functionality/</guid><description>Functionality, the range of operations that can be run in a computer system, is the foundation upon which all software product collateral, designs, discussions and comparisons are based. Customers buy on functionality. Developers create functionality. Users question what the product can do.
That is fine, but it’s not the whole story.
The right question is not what operations exist (or should exist), it’s how these operations work together, how the functionality flows.</description></item><item><title>Minimize the Glue</title><link>https://hiltmon.com/blog/2012/10/08/hiltmonism-minimize-the-glue/</link><pubDate>Mon, 08 Oct 2012 15:19:00 -0400</pubDate><guid>https://hiltmon.com/blog/2012/10/08/hiltmonism-minimize-the-glue/</guid><description>Glue is bad. Too much glue and your systems and processes become rigid, inflexible and incomprehensible. In technology and in business, you need to minimize the glue.
Let’s start with a few definitions. Lets call a potential interconnection between two systems a path. An interface is code to import or export data from an application. Now we can define an integration as a process whereby data is pulled from one interface, travels down a path and is loaded into another interface.</description></item><item><title>Lead the Business</title><link>https://hiltmon.com/blog/2012/08/01/hiltmonism-lead-the-business/</link><pubDate>Wed, 01 Aug 2012 13:37:00 -0400</pubDate><guid>https://hiltmon.com/blog/2012/08/01/hiltmonism-lead-the-business/</guid><description>There exists a common situation in business where management wants to take the business in a certain direction, but the technical and operations staff declare that it cannot be done. They then bring out a litany of reasons which boil down to two: the current systems cannot do it and current processes cannot support it. Therefore, management cannot make the change. And if management cannot make the changes, may the business cannot compete, cannot be successful and cannot continue.</description></item><item><title>Learn to Automate</title><link>https://hiltmon.com/blog/2012/06/20/learn-to-automate/</link><pubDate>Wed, 20 Jun 2012 08:57:00 -0400</pubDate><guid>https://hiltmon.com/blog/2012/06/20/learn-to-automate/</guid><description>It&amp;rsquo;s been almost six months since the Codecademy launched learn to code in 2012, headlined by Mayor Bloomberg. Lots of people pledged, lots signed up.
And I&amp;rsquo;ll be flabbergasted if any of them are still doing it.
I&amp;rsquo;m not going to go into why having everybody learn to code is a bad thing in detail, Jeff Attwood nails that in Please Don&amp;rsquo;t Learn to Code. Short version, it puts the method before the problem, programmers like to solve problems and create solutions, and the tool they mostly use is code.</description></item><item><title>No more than Five</title><link>https://hiltmon.com/blog/2012/06/09/hiltmonism-no-more-than-five/</link><pubDate>Sat, 09 Jun 2012 13:35:00 -0400</pubDate><guid>https://hiltmon.com/blog/2012/06/09/hiltmonism-no-more-than-five/</guid><description>We&amp;rsquo;ve all seen those interfaces: Internet Explorer windows with racks upon racks of toolbars, forms with hundreds of fields to fill in or applications with menus that run off the bottom of the screen, or worse, have unending levels of sub-menus. They are confusing, messy, hard to use and even harder to navigate.
This Hiltmonism is simple. One, there shall be no more than five things on an interface element. Ever!</description></item><item><title>Fix instead of Blame</title><link>https://hiltmon.com/blog/2012/02/11/hiltmonism-fix-instead-of-blame/</link><pubDate>Sat, 11 Feb 2012 09:49:00 -0400</pubDate><guid>https://hiltmon.com/blog/2012/02/11/hiltmonism-fix-instead-of-blame/</guid><description>I was saving this one up for later, but events of this week prompted me to write it now.
Whenever something goes wrong, the first reaction of many people is to find someone else to blame. Arguments and vitriol erupt, things are said or smashed, as each team member tries to protect themselves from being blamed.
I, for one, do not ever again want to be on a team that does this.</description></item><item><title>Operations by Exception</title><link>https://hiltmon.com/blog/2012/01/23/hiltmonism-operations-by-exception/</link><pubDate>Mon, 23 Jan 2012 17:14:00 -0400</pubDate><guid>https://hiltmon.com/blog/2012/01/23/hiltmonism-operations-by-exception/</guid><description>If we define operations as &amp;ldquo;a piece of organized and concerted activity involving a number of people&amp;rdquo;, then all businesses consist of a lot of operations. Back offices, accounting groups, processing units, operations departments, call them what you may, there are departments and departments of operations.
In the Automate or Die Hiltmonism, I pointed out the need to automate as much of your process flow as you can. This means tackling operations, its hordes of people, its arcane processes, its political hierarchy and its bureaucratic inertia.</description></item><item><title>Always Be Selling</title><link>https://hiltmon.com/blog/2012/01/09/hiltmonism-always-be-selling/</link><pubDate>Mon, 09 Jan 2012 18:43:00 -0400</pubDate><guid>https://hiltmon.com/blog/2012/01/09/hiltmonism-always-be-selling/</guid><description>There is no right time to start selling.
If you have a great idea, you should be talking about it, you should be selling it. If you have an alpha level product, you should be finding beta testers, you should be selling it. If you have a beta level product, you should know what the final product will look like, you should be selling it. If the product is done, you should be selling it.</description></item><item><title>One version of the truth</title><link>https://hiltmon.com/blog/2011/12/23/hiltmonism-one-version-of-the-truth/</link><pubDate>Fri, 23 Dec 2011 10:52:00 -0400</pubDate><guid>https://hiltmon.com/blog/2011/12/23/hiltmonism-one-version-of-the-truth/</guid><description>Its not uncommon for different software systems in a company to contain the same kinds information as others. However, it is very uncommon for this information to be the same across all systems. Often the accounting system has different information than the trading system, for example. Inventory systems often have different stock levels than sales systems.
The impact of this is that traders trade on what they know, accountants report profit on what they know, and sales happens on what they know.</description></item><item><title>If it ain't broke, break it</title><link>https://hiltmon.com/blog/2011/12/17/hiltmonism-if-it-aint-broke/</link><pubDate>Sat, 17 Dec 2011 12:22:00 -0400</pubDate><guid>https://hiltmon.com/blog/2011/12/17/hiltmonism-if-it-aint-broke/</guid><description>You have all heard the phrase &amp;ldquo;If it ain&amp;rsquo;t broke, don&amp;rsquo;t fix it.&amp;rdquo;. The implication being that if something is working adequately well, leave it alone.
Unacceptable!
If this were the case, we&amp;rsquo;d still be using stone axes and living in caves, as we did for 98% of the past 100,000 years. The reason we have metal axes and houses, electricity and cars and computers and internet is because there were people out there who felt it was broke, and they found new and interesting ways to fix it.</description></item><item><title>Write code for someone else</title><link>https://hiltmon.com/blog/2011/12/12/hiltmonism-write-code-for-someone-else/</link><pubDate>Mon, 12 Dec 2011 09:25:00 -0400</pubDate><guid>https://hiltmon.com/blog/2011/12/12/hiltmonism-write-code-for-someone-else/</guid><description>Whether you are just hacking up a script, writing the next must-have app, or working for the man, always be writing code as if someone else has to read it and understand it. Usually, that someone else is you, six months into the future, older, wiser, with a different mindset. And you&amp;rsquo;d hate to piss yourself off then, right?
This hiltmonism is a big one. Its easy to think you can fix something later, even though you know this mysterious later never comes.</description></item><item><title>Information, not Data</title><link>https://hiltmon.com/blog/2011/12/06/hiltmonism-information-not-data/</link><pubDate>Tue, 06 Dec 2011 19:22:00 -0400</pubDate><guid>https://hiltmon.com/blog/2011/12/06/hiltmonism-information-not-data/</guid><description>How many times have you opened a spreadsheet or a system, and seen pages and pages of numbers and gone &amp;lsquo;Ugh, its too hard to find what I want!&amp;rsquo;.
Most systems and spreadsheets try to present everything to their users, reams and reams of raw unfettered data. And most users, if you ask them, both want the data and hate the data volume that they have to deal with. Looking closer at the situation, the reason they want the raw data is because they believe they can use the data to get answers to their questions, or use the data to do their jobs.</description></item><item><title>Automate or Die</title><link>https://hiltmon.com/blog/2011/12/04/hiltmonism-automate-or-die/</link><pubDate>Sun, 04 Dec 2011 09:59:00 -0400</pubDate><guid>https://hiltmon.com/blog/2011/12/04/hiltmonism-automate-or-die/</guid><description>Computers are excellent at performing dull repetitive structured tasks, yet many organizations use armies of people to perform these tasks. Computers are also great at following along the same mind numbing process over and over again (we call this programming), yet we tend as users of computers, to perform these tasks manually on our computers.
Today&amp;rsquo;s Hiltmonism is very simple. Automate or die. Make the computer do the work so you can have a life.</description></item><item><title>Close to the Business</title><link>https://hiltmon.com/blog/2011/12/01/hiltmonism-close-to-the-business/</link><pubDate>Thu, 01 Dec 2011 21:20:00 -0400</pubDate><guid>https://hiltmon.com/blog/2011/12/01/hiltmonism-close-to-the-business/</guid><description>The best software designers and developers are the ones who completely understand the business and flows for which they are creating product. This understanding allows them to apply their technical skills to business problems and create great product. And the best way to understand is to be a part of the business, to be close to it.
Drawing on my career to date, the best products I have made have all come from me being right in the thick of things.</description></item></channel></rss>